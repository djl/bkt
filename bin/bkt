#!/usr/bin/env python
"""
Usage: bkt <command> [options]

bkt handles file uploads to S3.

Commands:
  ls             List all buckets or all files in a bucket
  get            Download a file from a bucket
  mk             Create a new bucket
  put            Upload a file to a bucket
  rm             Delete a bucket or a file from a bucket
"""
import os
import subprocess
import sys

try:
    import configparser
except ImportError:
    import ConfigParser as configparser

import botocore.session


class FileIterable(object):
    def __init__(self, filename, chunksize, callback):
        self.filename = filename
        self.chunksize = chunksize
        self.callback = callback
        self.totalsize = os.path.getsize(filename)
        self.readsofar = 0

    def __iter__(self):
        with open(self.filename, 'rb') as file:
            while True:
                data = file.read(self.chunksize)
                if not data:
                    sys.stderr.write("\n")
                    break
                self.readsofar += len(data)
                self.callback(self.readsofar, self.totalsize)
                yield data

    def __len__(self):
        return self.totalsize

    def read(self, size=-1):
        return next(self, b'')


class FileIterator(object):
    def __init__(self, fn, chunksize, callback=None):
        iterable = FileIterable(fn, chunksize, callback)
        self.iterator = iter(iterable)
        self.length = len(iterable)

    def read(self, size=-1):
        return next(self.iterator, b'')

    def __len__(self):
        return self.length


class S3Error(Exception):
    pass


class Command(object):

    CONFIG_FILE = '~/.bkt'
    BUFFER_SIZE = 1024 * 1024

    def __init__(self):
        self.setup_config()
        self.setup_auth()

        self.args = sys.argv[2:]

        self.session = botocore.session.get_session()
        self.session.set_credentials(self.access_key, self.secret_key)
        self.service = self.session.get_service('s3')
        self.endpoint = self.service.get_endpoint()

    def setup_auth(self):
        self.access_key = None
        self.secret_key = None

        for option in ['access_key', 'secret_key']:
            # try to get the regular options
            if self.config.has_option('auth', option):
                value = self.config.get('auth', option).decode('utf-8')
                setattr(self, option, value)

            # try to get the `_eval` option
            if self.config.has_option('auth', option + '_eval'):
                opt_eval = self.config.get('auth', option + '_eval')
                value = self.eval_option(opt_eval).decode('utf-8')
                setattr(self, option, value)

            if getattr(self, option, None) is None:
                self.error("Missing config option '%s'." % option)

    def setup_config(self):
        try:
            self.config = configparser.ConfigParser()
            self.config.readfp(open(os.path.expanduser(self.CONFIG_FILE)))
        except IOError:
            self.error("Couldn't read your config file.")

    def eval_option(self, cmd):
        try:
            from subprocess import PIPE
            from subprocess import DEVNULL
        except ImportError:
            DEVNULL = open(os.devnull, 'wb')
        proc = subprocess.Popen(cmd.split(), stdout=PIPE, stderr=DEVNULL)
        return proc.communicate()[0].strip()

    def error(self, msg, error=1):
        sys.stderr.write('bkt: %s\n' % msg)
        sys.exit(error)

    def help(self, *args, **kwargs):
        sys.stderr.write('%s\n' % self.__doc__.strip())
        sys.exit()

    def progress(self, cur, total):
        sys.stderr.write(str(cur * 100 / total) + '%\r')
        sys.stderr.flush()

    def op(self, operation, *args, **kwargs):
        op = self.service.get_operation(operation)
        hresp, dresp = op.call(self.endpoint, *args, **kwargs)
        if dresp and 'Errors' in dresp.keys():
            raise S3Error(dresp['Errors'][0]['Message'])
        return dresp


class GetCommand(Command):
    """
    Usage: bkt get <bucket> <file> [...]
    """
    name = 'get'

    def run(self):
        if len(self.args) < 2:
            self.help()

        try:
            for fn in self.args[1:]:
                resp = self.op('GetObject', bucket=self.args[0], key=fn)
                with open(fn, 'wb') as fh:
                    cur = 0
                    total = int(resp['ContentLength'])
                    buffer = resp['Body'].read(self.BUFFER_SIZE)
                    while buffer:
                        fh.write(buffer)
                        cur += self.BUFFER_SIZE
                        buffer = resp['Body'].read(self.BUFFER_SIZE)
                        self.progress(cur, total)
        except IOError:
            self.error("Could not write to local file '%s'" % fn)
        except S3Error as e:
            self.error(e)


class LsCommand(Command):
    """
    Usage: bkt ls [<bucket>]
    """
    name = 'ls'

    def run(self):
        if len(self.args) not in (0, 1):
            self.help()

        # listing all buckets
        if len(self.args) == 0:
            for bucket in self.op('ListBuckets')['Buckets']:
                sys.stdout.write(bucket['Name'] + '\n')
        else:
            try:
                resp = self.op('ListObjects', bucket=self.args[0])
                for obj in resp['Contents']:
                    sys.stdout.write(obj['Key'] + '\n')
            except S3Error as e:
                self.error(e)


class RmCommand(Command):
    """
    Usage: bkt rm <bucket> [<file> ...]
    """
    name = 'rm'

    def run(self):
        if len(self.args) < 1:
            self.help()

        try:
            if len(self.args) == 1:
                self.op('DeleteBucket', bucket=self.args[0])
            else:
                for fn in self.args[1:]:
                    self.op('DeleteObject', bucket=self.args[0], key=fn)
        except S3Error as e:
            self.error(e)


class MkCommand(Command):
    """
    Usage: bkt mk <bucket> [...]
    """
    name = 'mk'

    def run(self):
        if len(self.args) < 1:
            self.help()

        for bucket in self.args:
            try:
                self.op('CreateBucket', bucket=self.args[0])
            except S3Error as e:
                self.error(e)


class PutCommand(Command):
    """
    Usage: bkt put <bucket> <file> [...]
    """
    name = 'put'

    def run(self):
        if len(self.args) < 2:
            self.help()

        try:
            for fn in self.args[1:]:
                key = os.path.basename(fn)
                body = FileIterator(fn, self.BUFFER_SIZE, self.progress)
                self.op('PutObject', bucket=self.args[0], key=key, body=body)
        except OSError as e:
            self.error("Couldn't read file: %s" % fn)
        except S3Error as e:
            self.error(e)


if __name__ == '__main__':
    # no commands or arguments, print the help message
    if len(sys.argv) <= 1 or sys.argv[1] in ('-h', '--help', 'help'):
        sys.stderr.write(__doc__.lstrip())
        sys.exit()

    for c in Command.__subclasses__():
        if c.name == sys.argv[1]:
            command = c()
            command.run()
            sys.exit()

    # unknown command
    sys.stderr.write(__doc__.lstrip())
    sys.exit(1)
