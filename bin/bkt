#!/usr/bin/env python
"""
Usage: bkt <command> [options]

bkt handles file uploads to S3.

Commands:
  ls             List all buckets or all files in a bucket
  rm             Delete a bucket or a file from a bucket
  put            Upload a file to a bucket

Options:
  --help         Print this message and exit
"""
import ConfigParser
import os
import optparse
import re
import sys
import textwrap

from boto.exception import S3CreateError, S3ResponseError
from boto.s3.connection import Location, S3Connection
from boto.s3.key import Key


def sizeof(num):
    for x in ['bytes','KB','MB','GB','TB']:
        if num < 1024.0:
            return "%3.1f%s" % (num, x)
        num /= 1024.0


class Command(object):

    # max width of help/error messages
    message_width = 79

    # location where buckets should be created
    location = Location.DEFAULT

    def __init__(self):
        self.authorize()
        self.connect()

        # add a parser
        self.parser = optparse.OptionParser()
        self.parser.remove_option('--help')
        self.parser.add_option('-h', '--help',
                               action='callback',
                               callback=self.help)

    def authorize(self):
        bktfile = os.path.expanduser('~/.bkt')
        if not os.path.exists(bktfile):
            print >> sys.stderr, "Couldn't find your bkt file."
            sys.exit(1)

        config = ConfigParser.ConfigParser()
        config.readfp(open(bktfile))

        # auth
        if not config.has_section('auth'):
            self.error('Missing [auth] section in your ~/.bkt file.')

        self.access_key = config.get('auth', 'access_key')
        self.secret_key = config.get('auth', 'secret_key')

        # locations
        if config.has_option('buckets', 'location'):
            location = config.get('buckets', 'location')
            if not hasattr(Location, location):
                self.error("Unknown location '%s' " % location)
            self.location = getattr(Location, location)

    def connect(self):
        self.conn = S3Connection(self.access_key, self.secret_key)

    def error(self, msg):
        print >> sys.stderr, '\n'.join(textwrap.wrap(msg, self.message_width))
        sys.exit(1)

    def help(self, *args, **kwargs):
        """
        Prints the module's docstring and exits.
        """
        output = ""
        for line in self.__doc__.strip().split("\n"):
            output += "\n" + textwrap.dedent(line)
        print 'Usage: %s' % output.strip()
        sys.exit()

    def main(self):
        self.options, self.args = self.parser.parse_args(sys.argv[2:])
        self.run()


class CreateCommand(Command):
    """
    bkt create [options] <bucket>

    Creates a new bucket.

    Options:
        -l, --location LOC       The location in which to create the bucket
    """
    name = 'create'
    alias = ('mk',)

    def __init__(self):
        super(CreateCommand, self).__init__()

        # custom --location option
        self.parser.add_option('-l', '--location', dest='location',
                               default=self.location)

    def run(self):
        if len(self.args) != 1:
            self.help()

        try:
            self.conn.create_bucket(self.args[0], location=self.options.location)
        except (S3CreateError, S3ResponseError), e:
            self.error(e.error_message)


class LsCommand(Command):
    """
    bkt ls [options] [<bucket>]

    Lists all the buckets or all files in a given bucket.

    Options:
      -v, --verbose          Display more information about each bucket
    """
    name = 'ls'

    def __init__(self):
        super(LsCommand, self).__init__()
        self.parser.add_option('-a', '-v', '--verbose',
                               action='store_true', dest='verbose')

    def run(self):
        if len(self.args) not in (0, 1):
            self.help()

        # listing all buckets
        if len(self.args) == 0:
            buckets = self.conn.get_all_buckets()
            for b in buckets:
                if not self.options.verbose:
                    print b.name
                else:
                    print '%s %s' % (b.name, b.get_location() or "DEFAULT")
        else:
            try:
                bucket = self.conn.get_bucket(self.args[0])
                for key in bucket.list():
                    if not self.options.verbose:
                        print key.name
                    else:
                        print '%s %s' % (key.name, sizeof(key.size))
            except S3ResponseError, e:
                self.error(e.error_message)


class RmCommand(Command):
    """
    bkt rm <bucket> [<file>]

    Deletes a bucket or a file from a bucket.
    """
    name = 'rm'

    def run(self):
        if len(self.args) not in (1, 2):
            self.help()

        try:
            bucket = self.conn.get_bucket(self.args[0])
            if len(self.args) == 1:
                self.conn.delete_bucket(bucket)
            else:
                bucket.delete_key(self.args[1])
        except S3ResponseError, e:
            self.error(e.error_message)


class PutCommand(Command):
    """
    bkt put <bucket> <file>

    Uploads a new file to a bucket.
    """
    name = 'put'

    def run(self):
        if len(self.args) != 2:
            self.help()

        try:
            bucket = self.conn.get_bucket(self.args[0])
            key = Key(bucket)
            key.name = os.path.basename(self.args[1])
            key.set_contents_from_filename(self.args[1])
        except S3ResponseError, e:
            self.error(e.error_message)


if __name__ == '__main__':
    # no commands or arguments, print the help message
    if len(sys.argv) <= 1 or sys.argv[1] in ('-h', '--help', 'help'):
        print __doc__.strip()
        sys.exit()

    for c in Command.__subclasses__():
        if c.name == sys.argv[1] or hasattr(c, 'alias') and sys.argv[1] in c.alias:
            command = c()
            command.main()
            sys.exit()

    print "Unknown command '%s'." % sys.argv[1]
