#!/usr/bin/env python
"""
Usage: bkt <command> [options]

bkt handles file uploads to S3.

Commands:
  ls             List all buckets or all files in a bucket
  rm             Delete a bucket or a file from a bucket
  put            Upload a file to a bucket

Options:
  --help         Print this message and exit
"""
import ConfigParser
import os
import optparse
import re
import sys

from boto.exception import S3ResponseError
from boto.s3.connection import S3Connection
from boto.s3.key import Key


class Command(object):
    def __init__(self):
        self.authorize()
        self.connect()

        # add a parser
        self.parser = optparse.OptionParser()
        self.parser.remove_option('--help')
        self.parser.add_option('-h', '--help',
                               action='callback',
                               callback=self.help)

    def authorize(self):
        bktfile = os.path.expanduser('~/.bkt')
        if not os.path.exists(bktfile):
            print >> sys.stderr, "Couldn't find your bkt file."
            sys.exit(1)

        config =  ConfigParser.ConfigParser()
        config.readfp(open(bktfile))

        self.access_key = config.get('auth', 'access_key')
        self.secret_key = config.get('auth', 'secret_key')

    def connect(self):
        self.conn = S3Connection(self.access_key, self.secret_key)

    def error(self, msg):
        print >> sys.stderr, msg
        sys.exit(1)

    def help(self, *args, **kwargs):
        """
        Prints the module's docstring and exits.
        """
        # wow, this doesn't feel right at all
        doc = self.__doc__.strip()
        print 'Usage: %s' % re.sub('    ', '', doc)
        sys.exit()

    def main(self):
        self.options, self.args = self.parser.parse_args(sys.argv[2:])
        self.run()


class LsCommand(Command):
    """
    bkt ls [<bucket>]

    Lists all the buckets or all files in a given bucket.
    """
    name = 'ls'

    def run(self):
        if len(self.args) not in (0, 1):
            self.help()

        # listing all buckets
        if len(self.args) == 0:
            buckets = self.conn.get_all_buckets()
            for b in buckets:
                print b.name
        else:
            try:
                bucket = self.conn.get_bucket(self.args[0])
                for key in bucket.list():
                    print key.name
            except S3ResponseError, e:
                self.error(e.error_message)


class RmCommand(Command):
    """
    bkt rm <bucket> <file>

    Deletes a file from a bucket.
    """
    name = 'rm'

    def run(self):
        if len(self.args) != 2:
            self.help()

        bucket = self.conn.get_bucket(self.args[0])
        bucket.delete_key(self.args[1])


class PutCommand(Command):
    """
    bkt put <bucket> <file>

    Uploads a new file to a bucket.
    """
    name = 'put'

    def run(self):
        if len(self.args) != 2:
            self.help()

        try:
            bucket = self.conn.get_bucket(self.args[0])
            key = Key(bucket)
            key.name = os.path.basename(self.args[1])
            key.set_contents_from_filename(self.args[1])
        except S3ResponseError, e:
            self.error(e.error_message)


if __name__ == '__main__':
    # no commands or arguments, print the help message
    if len(sys.argv) <= 1 or sys.argv[1] in ('-h', '--help', 'help'):
        print __doc__.strip()
        sys.exit()

    for c in Command.__subclasses__():
        if c.name == sys.argv[1] or hasattr(c, 'alias') and sys.argv[1] in c.alias:
            command = c()
            command.main()
            sys.exit()

    print "Unknown command '%s'." % sys.argv[1]
