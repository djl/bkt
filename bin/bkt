#!/usr/bin/env python
"""
Usage: bkt <command> [options]

bkt handles file uploads to S3.

Commands:
  ls             List all buckets or all files in a bucket
  get            Download a file from a bucket
  mk             Create a new bucket
  put            Upload a file to a bucket
  rm             Delete a bucket or files from a bucket
"""
import os
import shlex
import subprocess
import sys
import threading

try:
    import configparser
except ImportError:
    import ConfigParser as configparser


import boto3
import botocore


PROGNAME = os.path.basename(sys.argv[0])

CONFIG_DIR = os.getenv('XDG_CONFIG_HOME', os.path.expanduser("~/.config"))
CONFIG_FILE = os.path.join(CONFIG_DIR, PROGNAME, 'config.ini')

HIDE_CURSOR = '\x1b[?25l'
SHOW_CURSOR = '\x1b[?25h'


def echo(msg=''):
    sys.stdout.write(msg + '\n')
    sys.stdout.flush()


def error(msg, error=1):
    sys.stderr.write('%s: %s%s\n' % (PROGNAME, msg, SHOW_CURSOR))
    sys.exit(error)


def get_unique_filename(fn):
    if not os.path.exists(fn):
        return fn

    count = 1
    while True:
        new_fn = '{}.{}'.format(fn, count)
        if not os.path.exists(new_fn):
            return new_fn
        count += 1


class Progress(object):
    def __init__(self, filename, total=None):
        self.filename = filename
        self.basename = os.path.basename(filename)
        if not total:
            total = float(os.path.getsize(filename))
        self.total = total
        self.seen = 0
        self.lock = threading.Lock()

    def __call__(self, hunk):
        finished = False
        if self.seen >= self.total:
            finished = True
            self.seen = self.total

        with self.lock:
            self.seen += hunk
            p = (self.seen / self.total) * 100
            sys.stderr.write('%s\r%s: %d%%' % (HIDE_CURSOR, self.basename, p))
            sys.stderr.flush()

        if finished:
            sys.stderr.write('%s\n' % SHOW_CURSOR)


class Command(object):

    def __init__(self):
        self.setup_config()
        self.setup_auth()
        self.setup_connection()
        self.args = sys.argv[2:]

    def eval(self, cmd):
        cmd = shlex.split(cmd)
        devnull = open(os.devnull, 'wb')
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=devnull)
        return proc.communicate()[0].strip()

    def get_local_filename(self, fn):
        count = 0
        new_fn = fn
        while True:
            if count:
                new_fn = '%s.%d' % (fn, count)
            if os.path.exists(new_fn):
                count += 1
                continue
            return new_fn

    def help(self):
        base = 'Usage: %s %s\n' % (PROGNAME, self.__doc__.strip())
        sys.stderr.write(base)
        sys.exit()

    def progress(self, cur, total):
        if cur >= total:
            finished = True
            cur = total
        else:
            finished = False

        percent = cur * 100 / total
        sys.stderr.write('%s\r%s: %d%%' % (HIDE_CURSOR, self._fn, percent))
        sys.stderr.flush()

        if finished:
            sys.stderr.write('%s\n' % SHOW_CURSOR)

    def setup_auth(self):
        self.access_key = None
        self.secret_key = None

        for option in ['access_key', 'secret_key']:
            # try to get the regular options
            if self.config.has_option('auth', option):
                value = self.config.get('auth', option).decode('utf-8')
                setattr(self, option, value)

            # try to get the `_eval` option
            if self.config.has_option('auth', option + '_eval'):
                opt_eval = self.config.get('auth', option + '_eval')
                value = self.eval(opt_eval).decode('utf-8')
                setattr(self, option, value)

            if getattr(self, option, None) is None:
                error("Missing config option '%s'." % option)

    def setup_config(self):
        try:
            self.config = configparser.ConfigParser()
            self.config.readfp(open(CONFIG_FILE))
        except IOError:
            error("Couldn't read your config file.")

    def setup_connection(self):
        session = boto3.Session(aws_access_key_id=self.access_key,
                                aws_secret_access_key=self.secret_key)
        self.conn = session.resource('s3')
        self.client = boto3.client('s3',
                                   aws_access_key_id=self.access_key,
                                   aws_secret_access_key=self.secret_key)


class GetCommand(Command):
    """
    get <bucket> <file> [...]
    """
    name = 'get'

    def run(self):
        if len(self.args) < 1:
            self.help()

        for fn in self.args[1:]:
            try:
                object = self.client.get_object(Bucket=self.args[0], Key=fn)
                total = object['ContentLength']
                dest = get_unique_filename(fn)
                self.client.download_file(self.args[0], fn, dest,
                                          Callback=Progress(fn, total=total))
            except botocore.exceptions.ClientError as e:
                error(e.response['Error']['Message'])


class LsCommand(Command):
    """
    ls [<bucket>]
    """
    name = 'ls'

    def run(self):
        # listing all buckets
        if len(self.args) == 0:
            for b in self.conn.buckets.all():
                echo(b.name)
            return

        # list contents of a bucket
        try:
            bucket = self.conn.Bucket(self.args[0])
            for key in bucket.objects.all():
                echo(key.key)
        except botocore.exceptions.ClientError as e:
            error(e.response['Error']['Message'])


class RmCommand(Command):
    """
    rm [-r] <bucket> [<file>, ...]
    """
    name = 'rm'

    def run(self):
        if self.args[0] == '-r':
            recurse = True
            del self.args[0]
        else:
            recurse = False

        if len(self.args) < 1:
            self.help()

        if recurse:
            for arg in self.args:
                try:
                    bucket = self.conn.Bucket(self.args[0])
                    for key in bucket.objects.all():
                        key.delete()
                    bucket.delete()
                except botocore.exceptions.ClientError as e:
                    error(e.response['Error']['Message'])
        else:
            try:
                bucket = self.conn.Bucket(self.args[0])
                if len(self.args) == 1:
                    bucket.delete()
                else:
                    for fn in self.args[1:]:
                        obj = self.conn.Object(self.args[0], fn)
                        obj.delete()
            except botocore.exceptions.ClientError as e:
                error(e.response['Error']['Message'])


class MkCommand(Command):
    """
    mk <bucket> [...]
    """
    name = 'mk'

    def run(self):
        if len(self.args) < 1:
            self.help()

        for bucket in self.args:
            try:
                self.conn.create_bucket(Bucket=bucket)
            except botocore.exceptions.ClientError as e:
                error(e.response['Error']['Message'])


class PutCommand(Command):
    """
    put <bucket> <file> [...]
    """
    name = 'put'

    def run(self):
        if len(self.args) < 2:
            self.help()

        for fn in self.args[1:]:
            try:
                key = os.path.basename(fn)
                self.client.upload_file(fn, self.args[0], key,
                                        Callback=Progress(fn))
            except botocore.exceptions.ClientError as e:
                error(e.response['Error']['Message'])


def main():
    # no commands or arguments, print the help message
    if len(sys.argv) <= 1 or sys.argv[1] in ('-h', '--help', 'help'):
        sys.stderr.write(__doc__.lstrip())
        sys.exit()

    for c in Command.__subclasses__():
        if c.name == sys.argv[1]:
            command = c()
            command.run()
            sys.exit()

    # unknown command
    sys.stderr.write(__doc__.lstrip())
    sys.exit(1)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write('\nAborting...%s\n' % SHOW_CURSOR)
        sys.exit(2)
